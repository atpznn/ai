const ggApiKey = "AIzaSyDK1lg01u_1Hs-I9_qWy6u0jcdF9r4IQKQ";
const ggSearch = `https://www.googleapis.com/customsearch/v1?key=${ggApiKey}&cx=81f7f798f04c748c6&q=dime+app+minimum+requirements+Android+iOS`;
// const gplay = require("google-play-scraper");
import gplay from "google-play-scraper";

async function checkDeviceSupport(appName) {
  try {
    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏≠‡∏õ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
    const results = await gplay.search({ term: appName, num: 1 });

    if (results.length === 0) {
      console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
      return;
    }

    const appId = results[0].appId; // ‡∏î‡∏∂‡∏á appId ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡πÅ‡∏£‡∏Å
    console.log(`üîç ‡∏û‡∏ö‡πÅ‡∏≠‡∏õ: ${results[0].title} (${appId})`);

    // üì• ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏≠‡∏õ
    const app = await gplay.app({ appId });
    const detail = {
      androidVersion: app.androidVersion,
      title: app.title,
      summary: app.summary,
    };
    return detail;
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    throw error;
  }
}
const aiEndPoint = "http://localhost:7000/api";
const llmModel = "deepseek-r1:14b";
const imageModel = "LLaVA:7B";

async function askAiText(prompt, moreRule = "") {
  const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏•‡∏π‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡πÄ‡πÄ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ üíô 
    ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô **‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢** ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô! 
    ‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô 
    ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤: ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì 
    ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ 
    ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏∏‡∏ì‡πÄ‡πÄ‡∏Ñ‡πà‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏°‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ 
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ dime ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏°‡∏≤‡πÄ‡πÄ‡∏Ñ‡πà‡∏ß‡πà‡∏≤ '‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô dime' 
    ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÉ‡∏î‡πÜ ${moreRule}`;

  const requestBody = {
    model: llmModel,
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: prompt },
    ],
    stream: false,
  };

  const result = await fetch(`${aiEndPoint}/chat`, {
    body: JSON.stringify(requestBody),
    headers: { "Content-Type": "application/json" },
    method: "POST",
  }).then((x) => x.json());
  return result.message.content;
}

function splitThink(message) {
  return message.replace(/<think>.*?<\/think>/gs, "").trim();
}

async function askAiIamge(images) {
  const result = await fetch(`${aiEndPoint}`, {
    body: {
      model: llmModel,
      prompt: "what is image please describe",
      stream: false,
      images: [...images],
    },
    method: "POST",
  });
  return result;
}

async function main() {
  const start = new Date();
  const resultAi = await askAiText("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ ‡πÅ‡∏≠‡∏õ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏£‡∏±‡∏ê ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°");
  const end = new Date();
  console.log(splitThink(resultAi));
  console.log((end.getTime() - start.getTime()) / 1000);
  const text = splitThink(resultAi);
  const match = text.match(/^‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (.+)/);

  if (match) {
    const nameApplication = match[1];
    const detail = await checkDeviceSupport(nameApplication);
    console.log(detail);
  }
}
// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
function compareVersions(userVersion, minVersion) {
  const userParts = userVersion.split(".").map(Number);
  const minParts = minVersion.split(".").map(Number);

  for (let i = 0; i < Math.max(userParts.length, minParts.length); i++) {
    const userNum = userParts[i] || 0;
    const minNum = minParts[i] || 0;
    if (userNum > minNum) return true;
    if (userNum < minNum) return false;
  }
  return true;
}

// üî• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î
main();
// getAppInfo("com.dime.app"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Package ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

// fetch(ggSearch)
//   .then((x) => x.json())
//   .then((x) => {
//     const searchResult = x.items.map((g) => `${g.htmlTitle} ${g.htmlSnippet}`);
//     console.log(searchResult);
//   });
